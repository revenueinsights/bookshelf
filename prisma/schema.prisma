// This is the updated Prisma schema with analytics functionality

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum PriceRank {
  GREEN
  YELLOW
  RED
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum TimeFrame {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

// New enums for BookScouter-style functionality
enum BookCondition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
  POOR
}

enum VendorType {
  BUYBACK
  MARKETPLACE
  AUCTION
  DIRECT
}

enum QuoteStatus {
  ACTIVE
  EXPIRED
  UNAVAILABLE
  PROCESSING
}

// Models
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String?
  name         String?
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bookScouterToken     String?       // Added field for BookScouter token
  bookScouterTokenExpiry DateTime?

  // Relations
  books        Book[]
  batches      Batch[]
  userSettings UserSettings?
  analytics    Analytics[] @relation("UserAnalyticsPrimary")
  batchSnapshots BatchSnapshot[] @relation("BatchSnapshots")
  priceUpdateJobs PriceUpdateJob[] @relation("UserPriceUpdateJobs")
}   

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  defaultCurrency    String   @default("USD")
  emailNotifications Boolean  @default(false)
  greenThreshold     Decimal  @default(50) @db.Decimal(5, 2)
  yellowThreshold    Decimal  @default(1) @db.Decimal(5, 2)
  updateFrequency    Int      @default(6)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id                String        @id @default(cuid())
  isbn              String
  isbn13            String?
  title             String?
  authors           String[]
  notes             String?
  currentPrice      Decimal       @default(0) @db.Decimal(10, 2)
  purchasePrice     Decimal?      @db.Decimal(10, 2)
  condition         BookCondition @default(GOOD)
  lastPriceUpdate   DateTime?
  userId            String
  batchId           String?
  bookMetadataId    String?       // Link to enhanced book metadata
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Added fields from second migration
  firstTracked      DateTime      @default(now())
  historicalHigh    Decimal       @default(0) @db.Decimal(10, 2)
  percentOfHigh     Decimal       @default(0) @db.Decimal(6, 2)
  priceRank         PriceRank     @default(RED)
  amazonPrice       Decimal?      @db.Decimal(10, 2)
  bestVendorName    String?
  priceHistory      Json?
  amazonPriceHistory Json?
  
  // New BookScouter-style fields
  bestQuotePrice    Decimal?      @db.Decimal(10, 2)
  bestQuoteVendor   String?
  totalQuotes       Int           @default(0)
  lastQuoteUpdate   DateTime?
  sellRecommendation String?      // "SELL_NOW", "WAIT", "HOLD"

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  batch        Batch?        @relation(fields: [batchId], references: [id])
  bookMetadata BookMetadata? @relation(fields: [bookMetadataId], references: [id])

  // Indexes
  @@index([userId])
  @@index([batchId])
  @@index([priceRank])
  @@index([bookMetadataId])
  @@index([condition])
  @@index([bestQuotePrice])
}

model Batch {
  id                  String    @id @default(cuid())
  name                String
  description         String?
  userId              String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Added fields from second migration
  totalBooks          Int       @default(0)
  greenCount          Int       @default(0)
  yellowCount         Int       @default(0)
  redCount            Int       @default(0)
  totalValue          Decimal   @default(0) @db.Decimal(10, 2)
  averagePercent      Decimal   @default(0) @db.Decimal(6, 2)
  highestPrice        Decimal?  @db.Decimal(10, 2)
  highestPriceISBN    String?
  lastPriceUpdate     DateTime?
  nextScheduledUpdate DateTime?

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  books          Book[]
  batchSnapshots BatchSnapshot[]

  // Indexes
  @@index([userId])
}

model PriceUpdateJob {
  id             String    @id @default(cuid())
  batchId        String?
  userId         String
  status         JobStatus @default(PENDING)
  startedAt      DateTime?
  completedAt    DateTime?
  errorMessage   String?
  booksTotal     Int       @default(0)
  booksProcessed Int       @default(0)
  nextRun        DateTime
  createdAt      DateTime  @default(now())

  // Relations
  user User @relation("UserPriceUpdateJobs", fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([nextRun, status])
}

// New models for analytics

model Analytics {
  id                  String    @id @default(cuid())
  userId              String
  date                DateTime  @default(now())
  timeFrame           TimeFrame
  periodKey           String    // Format: "2025-03" for month, "2025-W10" for week, "2025-03-01" for day
  totalBooks          Int
  totalBatches        Int
  totalGreenBooks     Int
  totalYellowBooks    Int
  totalRedBooks       Int
  totalInventoryValue Decimal   @db.Decimal(12, 2)
  avgBookValue        Decimal   @db.Decimal(10, 2)
  highestValueBook    Decimal   @db.Decimal(10, 2)
  totalPurchaseValue  Decimal?  @db.Decimal(12, 2)
  potentialProfit     Decimal?  @db.Decimal(12, 2)
  avgPercentOfHigh    Decimal   @db.Decimal(6, 2)
  createdAt           DateTime  @default(now())

  // Relations
  user User @relation("UserAnalyticsPrimary", fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, timeFrame, periodKey])
  @@index([date])
  @@unique([userId, timeFrame, periodKey])
}

model BatchSnapshot {
  id                  String   @id @default(cuid())
  batchId             String
  date                DateTime @default(now())
  timeFrame           TimeFrame
  periodKey           String    // Format: "2025-03" for month, "2025-W10" for week, "2025-03-01" for day
  totalBooks          Int
  greenCount          Int
  yellowCount         Int
  redCount            Int
  totalValue          Decimal  @db.Decimal(10, 2)
  averagePercent      Decimal  @db.Decimal(6, 2)
  highestPrice        Decimal? @db.Decimal(10, 2)
  highestPriceISBN    String?
  createdAt           DateTime @default(now())

  // Relations
  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], name: "BatchSnapshots")
  userId String?

  // Indexes
  @@index([batchId, timeFrame, periodKey])
  @@index([date])
  @@unique([batchId, timeFrame, periodKey])
}

// New models for BookScouter-style functionality

model Vendor {
  id              String      @id @default(cuid())
  name            String      @unique
  displayName     String
  website         String?
  logoUrl         String?
  type            VendorType
  isActive        Boolean     @default(true)
  averageRating   Decimal?    @db.Decimal(3, 2) // 0.00 to 5.00
  totalReviews    Int         @default(0)
  processingTime  String?     // e.g., "1-3 business days"
  shippingInfo    String?
  paymentMethods  String[]    // e.g., ["PayPal", "Check", "Direct Deposit"]
  minOrderValue   Decimal?    @db.Decimal(10, 2)
  maxOrderValue   Decimal?    @db.Decimal(10, 2)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  priceQuotes     PriceQuote[]
  
  // Indexes
  @@index([type, isActive])
  @@index([name])
}

model BookMetadata {
  id              String    @id @default(cuid())
  isbn            String    @unique
  isbn13          String?   @unique
  title           String
  subtitle        String?
  authors         String[]
  publisher       String?
  publishedDate   String?   // Sometimes just year, sometimes full date
  pageCount       Int?
  language        String?   @default("en")
  categories      String[]
  description     String?
  imageUrl        String?
  thumbnailUrl    String?
  averageRating   Decimal?  @db.Decimal(3, 2)
  ratingsCount    Int?
  retailPrice     Decimal?  @db.Decimal(10, 2)
  format          String?   // Hardcover, Paperback, etc.
  dimensions      String?
  weight          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  books           Book[]
  priceQuotes     PriceQuote[]
  marketData      MarketData[]

  // Indexes
  @@index([isbn])
  @@index([isbn13])
  @@index([title])
  @@index([authors])
}

model PriceQuote {
  id              String        @id @default(cuid())
  bookMetadataId  String
  vendorId        String
  condition       BookCondition
  price           Decimal       @db.Decimal(10, 2)
  originalPrice   Decimal?      @db.Decimal(10, 2) // For tracking price changes
  status          QuoteStatus   @default(ACTIVE)
  quotedAt        DateTime      @default(now())
  expiresAt       DateTime?
  lastChecked     DateTime      @default(now())
  isHighestPrice  Boolean       @default(false)
  notes           String?       // Vendor-specific notes
  shippingCost    Decimal?      @db.Decimal(10, 2)
  processingFee   Decimal?      @db.Decimal(10, 2)
  totalPayout     Decimal?      @db.Decimal(10, 2) // price - fees
  estimatedPayout String?       // e.g., "3-5 business days"
  
  // Relations
  bookMetadata    BookMetadata  @relation(fields: [bookMetadataId], references: [id], onDelete: Cascade)
  vendor          Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([bookMetadataId, condition])
  @@index([vendorId, status])
  @@index([price])
  @@index([quotedAt])
  @@index([isHighestPrice])
  @@unique([bookMetadataId, vendorId, condition])
}

model MarketData {
  id              String       @id @default(cuid())
  bookMetadataId  String
  condition       BookCondition
  averagePrice    Decimal      @db.Decimal(10, 2)
  highestPrice    Decimal      @db.Decimal(10, 2)
  lowestPrice     Decimal      @db.Decimal(10, 2)
  priceRange      Decimal      @db.Decimal(10, 2) // highest - lowest
  vendorCount     Int          // Number of vendors offering this book
  lastUpdated     DateTime     @default(now())
  priceHistory    Json?        // Historical price data
  demandScore     Decimal?     @db.Decimal(5, 2) // 0-100 demand indicator
  popularityRank  Int?         // Rank among similar books
  
  // Relations
  bookMetadata    BookMetadata @relation(fields: [bookMetadataId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([bookMetadataId, condition])
  @@index([averagePrice])
  @@index([highestPrice])
  @@index([lastUpdated])
  @@unique([bookMetadataId, condition])
}