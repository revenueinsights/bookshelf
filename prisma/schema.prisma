// This is the updated Prisma schema with analytics functionality

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum PriceRank {
  GREEN
  YELLOW
  RED
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum TimeFrame {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

// Models
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String?
  name         String?
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bookScouterToken     String?       // Added field for BookScouter token
  bookScouterTokenExpiry DateTime?

  // Relations
  books        Book[]
  batches      Batch[]
  userSettings UserSettings?
  analytics    Analytics[] @relation("UserAnalyticsPrimary")
  analyticsRelation Analytics[] @relation("UserAnalyticsSecondary")
  batchSnapshots BatchSnapshot[] @relation("BatchSnapshots")
  priceUpdateJobs PriceUpdateJob[] @relation("UserPriceUpdateJobs")
  priceUpdateJob  PriceUpdateJob?  @relation("UserPriceUpdateJobSingle")
  priceUpdateJobRelation PriceUpdateJob[] @relation("UserPriceUpdateJobMultiple")
}   

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  defaultCurrency    String   @default("USD")
  emailNotifications Boolean  @default(false)
  greenThreshold     Decimal  @default(50) @db.Decimal(5, 2)
  yellowThreshold    Decimal  @default(1) @db.Decimal(5, 2)
  updateFrequency    Int      @default(6)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPriceUpdateJob User? @relation("UserPriceUpdateJob")
}

model Book {
  id                String    @id @default(cuid())
  isbn              String
  isbn13            String?
  title             String?
  authors           String[]
  notes             String?
  currentPrice      Decimal   @default(0) @db.Decimal(10, 2)
  purchasePrice     Decimal?  @db.Decimal(10, 2)
  condition         String?
  lastPriceUpdate   DateTime?
  userId            String
  batchId           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Added fields from second migration
  firstTracked      DateTime  @default(now())
  historicalHigh    Decimal   @default(0) @db.Decimal(10, 2)
  percentOfHigh     Decimal   @default(0) @db.Decimal(6, 2)
  priceRank         PriceRank @default(RED)
  amazonPrice       Decimal?  @db.Decimal(10, 2)
  bestVendorName    String?
  priceHistory      Json?
  amazonPriceHistory Json?

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  batch Batch? @relation(fields: [batchId], references: [id])

  // Indexes
  @@index([userId])
  @@index([batchId])
  @@index([priceRank])
}

model Batch {
  id                  String    @id @default(cuid())
  name                String
  description         String?
  userId              String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Added fields from second migration
  totalBooks          Int       @default(0)
  greenCount          Int       @default(0)
  yellowCount         Int       @default(0)
  redCount            Int       @default(0)
  totalValue          Decimal   @default(0) @db.Decimal(10, 2)
  averagePercent      Decimal   @default(0) @db.Decimal(6, 2)
  highestPrice        Decimal?  @db.Decimal(10, 2)
  highestPriceISBN    String?
  lastPriceUpdate     DateTime?
  nextScheduledUpdate DateTime?

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  books          Book[]
  batchSnapshots BatchSnapshot[]

  // Indexes
  @@index([userId])
}

model PriceUpdateJob {
  id             String    @id @default(cuid())
  batchId        String?
  userId         String
  status         JobStatus @default(PENDING)
  startedAt      DateTime?
  completedAt    DateTime?
  errorMessage   String?
  booksTotal     Int       @default(0)
  booksProcessed Int       @default(0)
  nextRun        DateTime
  createdAt      DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPriceUpdateJob User? @relation("UserPriceUpdateJob", fields: [userPriceUpdateJobid], references: [id])
userPriceUpdateJobid String?

  // Indexes
  @@index([nextRun, status])
  User User[] @relation("UserPriceUpdateJobMultiple")
  userPriceUpdateJobs User[] @relation("UserPriceUpdateJobMultiple")
  // Removed duplicate field definition
  // Removed duplicate field definition
  User[] @relation("UserPriceUpdateJobSingle")
}

// New models for analytics

model Analytics {
  id                  String    @id @default(cuid())
  userId              String
  date                DateTime  @default(now())
  timeFrame           TimeFrame
  periodKey           String    // Format: "2025-03" for month, "2025-W10" for week, "2025-03-01" for day
  totalBooks          Int
  totalBatches        Int
  totalGreenBooks     Int
  totalYellowBooks    Int
  totalRedBooks       Int
  totalInventoryValue Decimal   @db.Decimal(12, 2)
  avgBookValue        Decimal   @db.Decimal(10, 2)
  highestValueBook    Decimal   @db.Decimal(10, 2)
  totalPurchaseValue  Decimal?  @db.Decimal(12, 2)
  potentialProfit     Decimal?  @db.Decimal(12, 2)
  avgPercentOfHigh    Decimal   @db.Decimal(6, 2)
  createdAt           DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyticsRelationUser User? @relation("UserAnalyticsSecondary", fields: [analyticsRelationUserid], references: [id])
analyticsRelationUserid String?

  // Indexes
  @@index([userId, timeFrame, periodKey])
  @@index([date])
  @@unique([userId, timeFrame, periodKey])
User User[] @relation("UserAnalyticsPrimary")
}

model BatchSnapshot {
  id                  String   @id @default(cuid())
  batchId             String
  date                DateTime @default(now())
  timeFrame           TimeFrame
  periodKey           String    // Format: "2025-03" for month, "2025-W10" for week, "2025-03-01" for day
  totalBooks          Int
  greenCount          Int
  yellowCount         Int
  redCount            Int
  totalValue          Decimal  @db.Decimal(10, 2)
  averagePercent      Decimal  @db.Decimal(6, 2)
  highestPrice        Decimal? @db.Decimal(10, 2)
  highestPriceISBN    String?
  createdAt           DateTime @default(now())

  // Relations
  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], name: "BatchSnapshots")
  userId String?

  // Indexes
  @@index([batchId, timeFrame, periodKey])
  @@index([date])
  @@unique([batchId, timeFrame, periodKey])
}